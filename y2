%token Int
%token Float
%token Char
%token Main
%token If
%token Else
%token While
%token Do
%token Return
%token For
%token salin      //\n
%token pq	      //;
%token parab	//(
%token parci	//)
%token llab 	//{
%token llci 	//}
%token mayig	//>=
%token myr	      //>
%token menig	//<=
%token mnr  	//<
%token igl	      //=
%token iglog	//==
%token dfrnt	//!= 
%token smr  	//+
%token rstr       //-
%token mltpl	//*
%token dvsn 	//'/'	
%token ID
%token num
%token cade
%token q          //,
%start PROGRAM
%%
PROGRAM : CONSTANTES DECLARACIONES DECL_FUNCIONES FUN_PRINCIPAL {printf("programa correcto");};
CONSTANTES : 
           | CONSTANTES ID {ap_id -> tipo = 2;} igl cade pq;
DECLARACIONES : 
              | DECLARACIONES DECL;
DECL : Int LISTA_ID pq
     | Char LISTA_ID pq;
LISTA_ID : ID {ap_id -> tipo = 1;}
         | LISTA_ID q ID {ap_id -> tipo = 1;};
DECL_FUNCIONES : 
              | DECL_FUNCIONES FUN_DECL;
FUN_PRINCIPAL : Main parab {EsGlobal = 0;} parci CUERPO;
FUN_DECL : ENCABEZADO CUERPO;
ENCABEZADO : Int ID  {ap_id -> tipo = 3;} parab F;
F : ARGS parci {ap_fun.num_args = $1;}
  | parci;
ARGS : ID {ap_id -> tipo = 1;}{$$ = 1;}
     | ID  {ap_id -> tipo = 1;} q ARGS {$$ = 1 + $4;};
CUERPO : llab DECL LISTA_INS llci;
LISTA_INS : INS pq
          | INS pq LISTA_INS;
INS : ID {if(ap_id -> tipo != 1) printf("ERROR");}
      igl EXP {if($4 != 1) printf("ERROR");}
    | If parab COND parci INSTS Else INSTS
    | If parab COND parci INSTS
    | While parab COND parci
    | Return parab EXP parci;
INSTS : INS
      | CUERPO;
COND : EXP RELOP EXP {if(($1 != 1)||($3 != 1)) printf("ERROR");
       else $$ = 1;};
EXP : TERMINO {$$ = 1;}
    | EXP ADOP TERMINO {if(($1 != 1)||($3 != 1)) printf("ERROR");
      else $$ = 1;};
TERMINO : FACTOR {$$ = $1;}
        | TERMINO MULOP FACTOR {if(($1 != 1)||($3 != 1)) printf("ERROR");
          else $$ = 1;};
FACTOR : ID {$$ = ap_id-> tipo;}
       | ID parab parci {if(ap_id -> num_args != 0) printf("ERROR");
         $$ = 1;}
       | ID parab {strcpy(ap_fun.Nombre, ap_id -> Nombre);
                   ap_fun.tipo = ap_id -> tipo;
                   ap_fun.num_args = ap_id -> num_args;} LISTA_EXP parci {if(ap_fun.num_args != $4)
         printf("ERROR"); $$ = 1;}
       | num {$$ = 1;}
       | parab EXP parci {$$ = $2;};
LISTA_EXP : EXP {$$ = 1;}
          |EXP q LISTA_EXP {$$ = 1 + $3;};
RELOP : mayig
      | menig
      | myr
      | mnr
      | igl
      | dfrnt;
ADOP : smr
     |rstr;
MULOP : mltpl
      | dvsn; 